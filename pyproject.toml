[project]
name = "first-it-thp"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django>=5.2.7",
    "django-ninja>=1.4.5",
    "pydantic-settings>=2.11.0",
]

[dependency-groups]
dev = [
    "django-stubs[compatible-mypy]>=5.2.7",
    "mypy>=1.18.2",
    "poethepoet>=0.37.0",
    "prek>=0.2.10",
    "ruff>=0.14.2",
]


[tool.ruff]
src = ["src"]
target-version = "py313"
include = ["src/**/*.py"]
exclude = ["src/**/migrations/*.py"]
fix = true
line-length = 100

[tool.ruff.lint]
fixable = ["ALL"]
select = ["ALL"]
ignore = [
    "ARG001", # Unused function argument: {name}
    "ARG002", #	unused-method-argument	Unused method argument: {name}
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY400", # Use logging.exception instead of logging.error
    "N818",   # Exception name should be named with an Error suffix
    "ISC001", # Implicit string concatenation
    "S303",   # Use of insecure MD2, MD4, MD5, or SHA1 hash function
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "D",      # Missing docstrings
    "EM101",  # Exception must not use a string literal, assign to variable first
    "RUF001", # String contains ambiguous {}. Did you mean {}?
    "RUF002", # Docstring contains ambiguous {}. Did you mean {}?
    "RUF003", # Comment contains ambiguous {}. Did you mean {}?
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
    "UP040",  # Type alias {name} uses {type_alias_method} instead of the type keyword
    "PD901",  # Avoid using the generic variable name df for DataFrames
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src"]


[tool.ruff.lint.per-file-ignores]
"src/manage.py" = [
   "EXE001",  # Shebang is present but file is not executable
   "PLC0415", # import should be at the top-level of a file
]
"tests/*.py" = [
    "S101",   # asserts allowed in tests...
    "S106",   # Possible hardcoded password
    "S603",   # `subprocess` call: check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
    "DTZ001", # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "DTZ005", # The use of `datetime.datetime.now()` without `tz` argument is not allowed
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Set".msg = "Use set[] instead."
"typing.List".msg = "Use list[] instead."
"typing.Dict".msg = "Use dict[] instead."
"typing.Optional".msg = "Use | None instead."
"typing.Type".msg = "Use type[] instead."
"typing.Union".msg = "Use | instead."

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"


[tool.mypy]
plugins = ["pydantic.mypy", "mypy_django_plugin.main"]
files = ["src/**/*.py"]

explicit_package_bases = true
show_error_codes = true
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
disable_error_code = ["import-untyped"]

warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true

disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = false

[tool.django-stubs]
django_settings_module = "src.config"

[[tool.mypy.overrides]]
module = [
  "src.*.models"
]
disable_error_code = ["var-annotated", "no-any-return"]

[[tool.mypy.overrides]]
module = [
  "src.*.admin"
]
disable_error_code = ["no-any-return"]

[[tool.mypy.overrides]]
module = [
  "src.shop.services"
]
disable_error_code = ["union-attr"]

[[tool.mypy.overrides]]
module = [
  "src.*.migrations.*"
]
disable_error_code = [
  "valid-type",
  "attr-defined",
  "misc",
]

[tool.poe.tasks]
lint = { cmd = "uv run prek run --all-files", help = "Run linting through pre-commit" }
run_server = { cmd = "uv run python src/manage.py runserver 0.0.0.0:8080", help = "Run application server" }
manage_py = { cmd = "uv run --env-file=.env python src/manage.py", help = "Run command using manage.py" }
make_migrations = { cmd = "uv run --env-file=.env python src/manage.py makemigrations", help = "Run makemigrations command" }
migrate = { cmd = "uv run --env-file=.env python src/manage.py migrate", help = "Run migrate command" }
